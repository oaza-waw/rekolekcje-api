buildscript {
  ext {
    springBootVersion = '1.5.10.RELEASE'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath('org.springframework:springloaded:1.2.6.RELEASE')
    classpath 'org.liquibase:liquibase-core:3.5.3'
    classpath 'org.postgresql:postgresql:42.1.4'
  }
}

plugins {
  id 'org.sonarqube' version '2.5'
  id 'org.liquibase.gradle' version '1.2.4'
  id 'io.franzbecker.gradle-lombok' version '1.11'
}

repositories {
  mavenCentral()
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'
apply plugin: 'jacoco'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
  verify {
    java {
      compileClasspath += main.output + main.compileClasspath
      compileClasspath += test.output + test.compileClasspath
      runtimeClasspath += test.runtimeClasspath
    }
    resources.srcDir file('src/verify/resources')
  }
}

dependencies {
  compile 'org.springframework.boot:spring-boot-starter-data-jpa'
  compile 'org.springframework.boot:spring-boot-starter-data-rest'
  compile 'org.springframework.boot:spring-boot-starter-jdbc'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'org.springframework.boot:spring-boot-starter-security'
  compile 'org.json:json:20160810'
  compile 'io.jsonwebtoken:jjwt:0.7.0'
  compile 'com.google.gag:gag:1.0.1'
  compile 'org.liquibase:liquibase-core:3.5.3'
  compile 'org.hibernate:hibernate-java8:5.1.0.Final'
  compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

  runtime 'com.h2database:h2'
  runtime 'org.postgresql:postgresql'

  runtime('org.springframework.boot:spring-boot-devtools')

  testCompile('org.springframework.boot:spring-boot-starter-test') {
    exclude group:'com.vaadin.external.google', module: 'android-json'
  }
  testCompile 'org.springframework.security:spring-security-test:5.0.0.RELEASE'
  testCompile 'org.assertj:assertj-core:3.8.0'
  testCompile 'nl.jqno.equalsverifier:equalsverifier:2.3.3'
}

test {
  testLogging {
    afterSuite {
      desc, result -> reportTestResults(desc, result)
    }
  }
  outputs.upToDateWhen { false }
}

task verify(type: Test) {
  testClassesDir = sourceSets.verify.output.classesDir
  classpath = sourceSets.verify.runtimeClasspath
  outputs.upToDateWhen { false }
  testLogging {
    afterSuite {
      desc, result -> reportTestResults(desc, result)
    }
  }
}

check.dependsOn verify

private void reportTestResults(desc, result) {
  if (!desc.parent) { // will match the outermost suite
    println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
  }
}

processResources {
  from('../rekolekcje-webapp/dist') {
    //Public is a default supported Spring Boot resources directory.
    into 'public'
  }
}

//frontend:build will be run before the processResources
processResources.dependsOn(':rekolekcje-webapp:buildClient')
//bootRun.dependsOn(':rekolekcje-webapp:buildClientDev')
//jar.dependsOn(':rekolekcje-webapp:buildClient')

jacocoTestReport {
  reports {
    xml.enabled true
  }
  executionData test,verify
}

tasks.withType(Test) {
  jacoco {
    destinationFile = file("${buildDir}/jacoco/test.exec")
  }
}

task cleanJacoco(dependsOn: 'clean') {
  delete "${buildDir}/jacoco"
}

check.dependsOn jacocoTestReport

bootRun {
  systemProperties System.properties
}

task stage {
  dependsOn build
}

gradle.taskGraph.whenReady { graph ->
  if (graph.hasTask(stage)) {
    test.enabled = false
    verify.enabled = false
  }
}

sonarqube {
  properties {
    properties["sonar.tests"] += sourceSets.verify.allSource.srcDirs
  }
}
project.tasks['sonarqube'].dependsOn 'check'

idea {
  module {
    inheritOutputDirs = false
    outputDir = file(project.buildDir.toString() + '/classes/main/')
    testSourceDirs += file('verify')
//    testOutputDir file(project.buildDir.toString() + '/classes/test')
    testSourceDirs += project.sourceSets.verify.java.srcDirs
    testSourceDirs += project.sourceSets.verify.resources.srcDirs
  }
}

liquibase {
  activities {
    main {
      changeLogFile 'src/main/resources/changelogs.postgresql.sql'
      url 'jdbc:postgresql://localhost:5432/rekolekcjedb'
      username 'postgres'
      password 'postgres'
    }
  }
}
